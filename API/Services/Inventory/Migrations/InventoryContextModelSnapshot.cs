// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Services.Inventory.Data;

#nullable disable

namespace Inventory.Migrations
{
    [DbContext(typeof(InventoryContext))]
    partial class InventoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Services.Inventory.Models.CatalogueProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Instock")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("CatalogueProducts");
                });

            modelBuilder.Entity("Services.Inventory.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Services.Inventory.Models.ProductPrice", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<double?>("RRP")
                        .HasColumnType("float");

                    b.Property<double>("SalePrice")
                        .HasColumnType("float");

                    b.HasKey("ProductId");

                    b.ToTable("ProductPrices");
                });

            modelBuilder.Entity("Services.Inventory.Models.CatalogueProduct", b =>
                {
                    b.HasOne("Services.Inventory.Models.Product", "Product")
                        .WithOne("CatalogueProduct")
                        .HasForeignKey("Services.Inventory.Models.CatalogueProduct", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Services.Inventory.Models.ProductPrice", b =>
                {
                    b.HasOne("Services.Inventory.Models.CatalogueProduct", "CatalogueProduct")
                        .WithOne("ProductPrice")
                        .HasForeignKey("Services.Inventory.Models.ProductPrice", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogueProduct");
                });

            modelBuilder.Entity("Services.Inventory.Models.CatalogueProduct", b =>
                {
                    b.Navigation("ProductPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("Services.Inventory.Models.Product", b =>
                {
                    b.Navigation("CatalogueProduct")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
